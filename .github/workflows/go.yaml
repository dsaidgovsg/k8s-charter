on:
  pull_request:
    branches:    
      - master
  push:
    branches:    
      - master
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: ['darwin', 'linux', 'windows']
        goarch: ['amd64']
    name: Building for ${{ matrix.goos }}_${{ matrix.goarch }}
    env:
      BIN_PREFIX: "k8s-charter"
      GOOS: "${{ matrix.goos }}"
      GOARCH: "${{ matrix.goarch }}"
      BIN_NAME: "${BIN_PREFIX}_${GOOS}_${GOARCH}"
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: actions/cache@v3
        with:
          # In order:
          # - Module download cache
          # - Build cache (Linux)
          # - Build cache (Mac)
          # - Build cache (Windows)
          path: |-
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ matrix.goos }}-${{ matrix.goarch }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |-
            ${{ matrix.goos }}-${{ matrix.goarch }}-
      - name: Set bin_name output and BIN_NAME env var
        id: set_path
        run: |-
          bin_name="${BIN_PREFIX}_${GOOS}_${GOARCH}"
          if [[ "${GOOS}" == "windows" ]]; then
            bin_name+=".exe"
          fi
          echo "::set-output name=bin_name::${bin_name}"
          echo "BIN_NAME=${BIN_NAME}" >> ${GITHUB_ENV}
      - name: Build binary
        run: CGO_ENABLED=0 go build -ldflags "-s -w" -o "${BIN_NAME}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ github.ref }}
          tag_name: latest
          # release_name: ${{ github.ref }}
          release_name: latest
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        # if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.set_path.outputs.bin_name }}
          asset_name: ${{ steps.set_path.outputs.bin_name }}
          asset_content_type: application/octet-stream
